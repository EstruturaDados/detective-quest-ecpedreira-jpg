#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura que representa uma sala da mansão (nó da árvore binária)
typedef struct Sala {
    char nome[50];
    struct Sala *esquerda;  // caminho à esquerda
    struct Sala *direita;   // caminho à direita
} Sala;

/*
 * Função: criarSala
 * -----------------
 * Cria dinamicamente uma sala com um nome.
 * 
 * nome: string com o nome da sala.
 * retorna: ponteiro para a sala criada.
 */
Sala* criarSala(const char *nome) {
    Sala *nova = (Sala*) malloc(sizeof(Sala));
    if (nova == NULL) {
        printf("Erro ao alocar memória!\n");
        exit(1);
    }
    strcpy(nova->nome, nome);
    nova->esquerda = NULL;
    nova->direita = NULL;
    return nova;
}

/*
 * Função: explorarSalas
 * ---------------------
 * Permite ao jogador navegar pela mansão a partir de uma sala inicial.
 * O jogador escolhe entre ir para a esquerda (e), direita (d) ou sair (s).
 * A exploração termina ao chegar em um nó-folha (sem caminhos).
 * 
 * atual: ponteiro para a sala inicial da exploração.
 */
void explorarSalas(Sala *atual) {
    char escolha;

    while (atual != NULL) {
        printf("\nVocê está em: %s\n", atual->nome);

        // Caso a sala seja um nó-folha
        if (atual->esquerda == NULL && atual->direita == NULL) {
            printf("Este é um cômodo final, não há mais caminhos!\n");
            break;
        }

        printf("Escolha seu caminho: (e = esquerda, d = direita, s = sair): ");
        scanf(" %c", &escolha);

        if (escolha == 'e' || escolha == 'E') {
            if (atual->esquerda != NULL) {
                atual = atual->esquerda;
            } else {
                printf("Não há sala à esquerda!\n");
            }
        } else if (escolha == 'd' || escolha == 'D') {
            if (atual->direita != NULL) {
                atual = atual->direita;
            } else {
                printf("Não há sala à direita!\n");
            }
        } else if (escolha == 's' || escolha == 'S') {
            printf("Você decidiu sair da exploração.\n");
            break;
        } else {
            printf("Opção inválida! Tente novamente.\n");
        }
    }
}

/*
 * Função: main
 * ------------
 * Monta o mapa da mansão (árvore binária fixa) e inicia a exploração.
 */
int main() {
    // Criando salas (nós da árvore)
    Sala *hall = criarSala("Hall de Entrada");
    Sala *salaEstar = criarSala("Sala de Estar");
    Sala *cozinha = criarSala("Cozinha");
    Sala *biblioteca = criarSala("Biblioteca");
    Sala *jardim = criarSala("Jardim");
    Sala *quarto = criarSala("Quarto");
    Sala *porao = criarSala("Porão");

    // Conectando as salas (árvore binária fixa)
    hall->esquerda = salaEstar;
    hall->direita = cozinha;

    salaEstar->esquerda = biblioteca;
    salaEstar->direita = jardim;

    cozinha->esquerda = quarto;
    cozinha->direita = porao;

    // Iniciando exploração
    printf("=== Detective Quest: Mansão Misteriosa ===\n");
    printf("Explore a mansão escolhendo os caminhos!\n");

    explorarSalas(hall);

    // Liberando memória
    free(hall);
    free(salaEstar);
    free(cozinha);
    free(biblioteca);
    free(jardim);
    free(quarto);
    free(porao);

    return 0;
}
